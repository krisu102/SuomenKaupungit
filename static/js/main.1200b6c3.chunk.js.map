{"version":3,"sources":["Components/Tables/Table.module.css","api/index.js","Components/Tables/CityTable.js","Components/Tables/SingleCityTable.jsx","Components/CitySelect/CitySelect.jsx","App.js","index.js","App.module.css"],"names":["module","exports","fetchCurrentYearData","a","params","axios","post","response","data","console","log","fetchCityData","get","metaDataResponse","metaData","variables","CityNames","i","values","length","startsWith","key","valueText","valueTexts","forEach","city","NameoftheCity","push","Number","cityNames","descendingComparator","b","orderBy","headCells","id","numeric","disablePadding","label","EnhancedTableHead","props","classes","order","onRequestSort","TableHead","TableRow","map","headCell","TableCell","align","padding","sortDirection","TableSortLabel","active","direction","onClick","property","event","className","visuallyHidden","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","table","minWidth","border","clip","height","margin","overflow","position","top","EnhancedTable","React","useState","setOrder","setOrderBy","page","setPage","dense","setDense","rowsPerPage","setRowsPerPage","lastYearData","latestYear","kaupunki","asukasluku","muutos","muutosPercent","NewRow","emptyRows","Math","min","Paper","TableContainer","Table","aria-labelledby","size","aria-label","rowCount","TableBody","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","slice","row","labelId","hover","component","scope","style","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","target","value","FormControlLabel","control","Switch","checked","onChange","SingleCityTable","currentYearData","CityName","SelectedCity","SelectedMonthlyCity","vuosi","kuukausi","styles","labels","datasets","borderColor","fill","lineTension","CitySelect","handleCityChange","names","Object","FormControl","NativeSelect","defaultValue","e","App","state","CurrentYearData","CityData","City","setState","FetchedFinData","FetchedCityData","this","CData","Data","container","Component","ReactDOM","render","document","getElementById"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,KAAO,sB,qOCGZC,EAAoB,uCAAG,gCAAAC,EAAA,sEAEtBC,EAAS,CACb,MAAS,CACP,CACE,KAAQ,OACR,UAAa,CACX,OAAU,MACV,OAAU,CACR,SAIN,CACE,KAAQ,YACR,UAAa,CACX,OAAU,OACV,OAAU,CACR,SAIN,CACE,KAAQ,SACR,UAAa,CACX,OAAU,OACV,OAAU,CACR,UAKR,SAAY,CACV,OAAU,SAjCc,SAoCTC,IAAMC,KAAK,qFAAsFF,GApCxF,cAoC1BG,EApC0B,OAqC1BC,EAAOD,EAASC,KAAKA,KArCK,kBAwCzBA,GAxCyB,gCA2C5BC,QAAQC,IAAI,cACZD,QAAQC,IAAR,MA5C4B,yDAAH,qDAkDpBC,EAAa,uCAAG,4CAAAR,EAAA,sEAEjBC,EAAS,CACb,MAAS,CACP,CACI,KAAQ,OACR,UAAa,CACX,OAAU,MACV,OAAU,CACR,SAKN,CACE,KAAQ,SACR,UAAa,CACX,OAAU,OACV,OAAU,CACR,SACA,YACA,kBAMN,SAAY,CACV,OAAU,SA5BK,SA+BJC,IAAMC,KAAK,uFAAwFF,GA/B/F,cA+BrBG,EA/BqB,OAgCrBC,EAAOD,EAASC,KAAKA,KAhCA,SAkCIH,IAAMO,IAAI,wFAlCd,OA0C3B,IARMC,EAlCqB,OAoCrBC,EAAWD,EAAiBL,KAAKO,UAAU,GAG7CC,EAAY,GAGRC,EAAI,EAAGA,EAAIH,EAASI,OAAOC,OAAQF,IACtCH,EAASI,OAAOD,GAAGG,WAAW,QAC/BC,EAAMP,EAASI,OAAOD,GACtBK,EAAYR,EAASS,WAAWN,GAChCD,EAAUK,GAAOC,GA9CM,OAoD3Bd,EAAKgB,SAAQ,SAASC,GACpB,IAAIC,EAAgBV,EAAUS,EAAKJ,IAAI,IACvCI,EAAKJ,IAAIM,KAAKD,GACdD,EAAKJ,IAAI,GAAKO,OAAOH,EAAKJ,IAAI,IAC9BI,EAAKP,OAAO,GAAKU,OAAOH,EAAKP,OAAO,IACpCO,EAAKP,OAAO,GAAKU,OAAOH,EAAKP,OAAO,IACpCO,EAAKP,OAAO,GAAKU,OAAOH,EAAKP,OAAO,OA1DX,kBA8DpB,CAACV,KAAMA,EACNqB,UAAWb,IA/DQ,kCAkEvBP,QAAQC,IAAI,cACZD,QAAQC,IAAR,MAnEuB,0DAAH,qD,oHCtC1B,SAASoB,EAAqB3B,EAAG4B,EAAGC,GAClC,OAAID,EAAEC,GAAW7B,EAAE6B,IACT,EAEND,EAAEC,GAAW7B,EAAE6B,GACV,EAEF,EAmBT,IAAMC,EAAY,CAChB,CAAEC,GAAI,WAAYC,SAAS,EAAOC,gBAAgB,EAAMC,MAAO,YAC/D,CAAEH,GAAI,aAAcC,SAAS,EAAMC,gBAAgB,EAAOC,MAAO,cACjE,CAAEH,GAAI,SAAUC,SAAS,EAAMC,gBAAgB,EAAOC,MAAO,UAC7D,CAAEH,GAAI,gBAAiBC,SAAS,EAAMC,gBAAgB,EAAOC,MAAO,YAItE,SAASC,EAAkBC,GAAQ,IACzBC,EAA2CD,EAA3CC,QAASC,EAAkCF,EAAlCE,MAAOT,EAA2BO,EAA3BP,QAASU,EAAkBH,EAAlBG,cAKjC,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGX,EAAUY,KAAI,SAACC,GAAD,OACb,kBAACC,EAAA,EAAD,CACE1B,IAAKyB,EAASZ,GACdc,MAAOF,EAASX,QAAU,QAAU,OACpCc,QAASH,EAASV,eAAiB,OAAS,UAC5Cc,cAAelB,IAAYc,EAASZ,IAAKO,GAEzC,kBAACU,EAAA,EAAD,CACEC,OAAQpB,IAAYc,EAASZ,GAC7BmB,UAAWrB,IAAYc,EAASZ,GAAKO,EAAQ,MAC7Ca,SAjBeC,EAiBYT,EAASZ,GAjBR,SAACsB,GACvCd,EAAcc,EAAOD,MAkBVT,EAAST,MACTL,IAAYc,EAASZ,GACpB,0BAAMuB,UAAWjB,EAAQkB,gBACZ,SAAVjB,EAAmB,oBAAsB,oBAE1C,OAxBU,IAACc,OA6C7B,IAAMI,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,OAETC,MAAO,CACLD,MAAO,OACPE,aAAcJ,EAAMK,QAAQ,IAE9BC,MAAO,CACLC,SAAU,KAEZV,eAAgB,CACdW,OAAQ,EACRC,KAAM,gBACNC,OAAQ,EACRC,QAAS,EACTC,SAAU,SACVxB,QAAS,EACTyB,SAAU,WACVC,IAAK,GACLZ,MAAO,OAOI,SAASa,EAAT,GAAgC,IAARpE,EAAO,EAAPA,KAC/BgC,EAAUmB,IAD4B,EAElBkB,IAAMC,SAAS,QAFG,mBAErCrC,EAFqC,KAE9BsC,EAF8B,OAGdF,IAAMC,SAAS,cAHD,mBAGrC9C,EAHqC,KAG5BgD,EAH4B,OAIpBH,IAAMC,SAAS,GAJK,mBAIrCG,EAJqC,KAI/BC,EAJ+B,OAKlBL,IAAMC,UAAS,GALG,mBAKrCK,EALqC,KAK9BC,EAL8B,OAMNP,IAAMC,SAAS,IANT,mBAMrCO,EANqC,KAMxBC,EANwB,KAgC5C,IAAI9E,EAAKW,OACP,MAAO,aASX,IAAMoE,EAAe,GACfC,EAAahF,EAAKA,EAAKW,OAAS,GAAGE,IAAI,GAE7Cb,EAAKgB,SAAQ,SAASC,GACpB,IAVmBgE,EAAUC,EAAYC,EAAQC,EAYjD,GAFWnE,EAAKJ,IAAI,KAERmE,EAAW,CACrB,IAAIK,GAbaJ,EAaOhE,EAAKJ,IAAI,GAbNqE,EAaUjE,EAAKP,OAAO,GAbVyE,EAaclE,EAAKP,OAAO,GAblB0E,EAasBnE,EAAKP,OAAO,GAZ5E,CAAEuE,WAAUC,aAAYC,SAAQC,kBAarCL,EAAa5D,KAAKkE,OAItB,IAAMC,EAAYT,EAAcU,KAAKC,IAAIX,EAAaE,EAAapE,OAAS8D,EAAOI,GAGjF,OACE,yBAAK5B,UAAWjB,EAAQsB,MACtB,8CACA,kBAACmC,EAAA,EAAD,CAAOxC,UAAWjB,EAAQwB,OACxB,kBAACkC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE1C,UAAWjB,EAAQ2B,MACnBiC,kBAAgB,aAChBC,KAAMlB,EAAQ,QAAU,SACxBmB,aAAW,kBAEX,kBAAChE,EAAD,CACEE,QAASA,EACTC,MAAOA,EACPT,QAASA,EACTU,cAhEc,SAACc,EAAOD,GAEhCwB,EADc/C,IAAYuB,GAAsB,QAAVd,EACrB,OAAS,OAC1BuC,EAAWzB,IA8DDgD,SAAUhB,EAAapE,SAEzB,kBAACqF,EAAA,EAAD,KAvKZ,SAAoBC,EAAOC,GACzB,IAAMC,EAAiBF,EAAM5D,KAAI,SAAC+D,EAAIC,GAAL,MAAe,CAACD,EAAIC,MAMrD,OALAF,EAAeG,MAAK,SAAC3G,EAAG4B,GACtB,IAAMU,EAAQiE,EAAWvG,EAAE,GAAI4B,EAAE,IACjC,OAAc,IAAVU,EAAoBA,EACjBtC,EAAE,GAAK4B,EAAE,MAEX4E,EAAe9D,KAAI,SAAC+D,GAAD,OAAQA,EAAG,MAiKxBG,CAAWxB,EA9K1B,SAAuB9C,EAAOT,GAC5B,MAAiB,SAAVS,EACH,SAACtC,EAAG4B,GAAJ,OAAUD,EAAqB3B,EAAG4B,EAAGC,IACrC,SAAC7B,EAAG4B,GAAJ,OAAWD,EAAqB3B,EAAG4B,EAAGC,IA2KJgF,CAAcvE,EAAOT,IAC5CiF,MAAMhC,EAAOI,EAAaJ,EAAOI,EAAcA,GAC/CxC,KAAI,SAACqE,EAAKL,GACT,IAAMM,EAAO,kCAA8BN,GAE3C,OACE,kBAACjE,EAAA,EAAD,CAAUvB,IAAK6F,EAAIzB,SAAU2B,OAAK,GAChC,kBAACrE,EAAA,EAAD,CAAWsE,UAAU,KAAKnF,GAAIiF,EAASG,MAAM,MAAMrE,QAAQ,QACxDiE,EAAIzB,UAEP,kBAAC1C,EAAA,EAAD,CAAWC,MAAM,SAASkE,EAAIxB,YAC9B,kBAAC3C,EAAA,EAAD,CAAWC,MAAM,SAASkE,EAAIvB,QAC9B,kBAAC5C,EAAA,EAAD,CAAWC,MAAM,SAASkE,EAAItB,mBAIrCE,EAAY,GACX,kBAAClD,EAAA,EAAD,CAAU2E,MAAO,CAAEhD,QAASY,EAAQ,GAAK,IAAMW,IAC7C,kBAAC/C,EAAA,EAAD,CAAWyE,QAAS,QAM9B,kBAACC,EAAA,EAAD,CACEC,mBAAoB,CAAC,EAAG,GAAI,IAC5BL,UAAU,MACVM,MAAOpC,EAAapE,OACpBkE,YAAaA,EACbJ,KAAMA,EACN2C,aA3FiB,SAACpE,EAAOqE,GAC/B3C,EAAQ2C,IA2FFC,oBAxFwB,SAACtE,GAC/B8B,EAAeyC,SAASvE,EAAMwE,OAAOC,MAAO,KAC5C/C,EAAQ,OAyFN,kBAACgD,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAQC,QAASlD,EAAOmD,SAvFb,SAAC9E,GACzB4B,EAAS5B,EAAMwE,OAAOK,YAuFlBhG,MAAM,mB,+BC/GCkG,EAlHS,SAAC,GAA8C,IAA7C9G,EAA4C,EAA5CA,KAAMT,EAAsC,EAAtCA,UAAWR,EAA2B,EAA3BA,KAAMgI,EAAqB,EAArBA,gBAWrChG,EATQoB,YAAW,CAC3BO,MAAO,CACLJ,MAAO,KAETC,MAAO,CACLD,MAAO,MAISJ,GAGlB,IAAInD,EAAKW,SAAWqH,EAAgBrH,OACjC,MAAO,aAKVqH,EAAgBhH,SAAQ,SAASC,GAC7B,IAAIC,EAAgBV,EAAUS,EAAKJ,IAAI,IACvCI,EAAKJ,IAAIM,KAAKD,GACdD,EAAKP,OAAO,GAAKU,OAAOH,EAAKP,OAAO,OAYxC,IAAIuH,EAAWhH,EAGTiH,EAAe,GACfC,EAAsB,GAyB5B,OAtBAnI,EAAKgB,SAAQ,SAASC,GAClB,IAhBsBgE,EAAUC,EAAYC,EAAQiD,EAkBhD,GAFOnH,EAAKJ,IAAI,KAEJoH,EAAS,CACjB,IAAI5C,GAnBUJ,EAmBgBhE,EAAKJ,IAAI,GAnBfqE,EAmBmBjE,EAAKP,OAAO,GAnBnByE,EAmBuBlE,EAAKP,OAAO,GAnB3B0H,EAmB+BnH,EAAKJ,IAAI,GAlBrF,CAAEoE,WAAUC,aAAYC,SAAQiD,UAmB/BF,EAAa/G,KAAKkE,OAM9B2C,EAAgBhH,SAAQ,SAASC,GAC7B,IAvBuBoH,EAAUpD,EAAUC,EA0BvC,GAHOjE,EAAKJ,IAAI,KAGJoH,EAAS,CACjB,IAAI5C,GA3BWgD,EA2BgBpH,EAAKJ,IAAI,GA3BfoE,EA2BmBhE,EAAKJ,IAAI,GA3BlBqE,EA2BsBjE,EAAKP,OAAO,GA1BtE,CAAE2H,WAAUpD,WAAUC,eA2BrBiD,EAAoBhH,KAAKkE,OAMnC,yBAAKpC,UAAWqF,IAAOhF,MACvB,mDACA,kBAAC,IAAD,CACMtD,KAAM,CACFuI,OAAQL,EAAa7F,KAAI,qBAAE+F,SAC3BI,SAAU,CAAC,CACPxI,KAAMkI,EAAa7F,KAAI,qBAAE6C,cACzBrD,MAAO,aACP4G,YAAa,UACbC,MAAM,EACNC,YAAa,GAEjB,CACI3I,KAAMkI,EAAa7F,KAAI,qBAAE8C,UACzBtD,MAAO,SACP4G,YAAa,uBACbC,MAAM,EACNC,YAAa,OAM3B,6DACA,kBAAClD,EAAA,EAAD,CAAOxC,UAAWjB,EAAQwB,OACxB,kBAACmC,EAAA,EAAD,CAAO1C,UAAWjB,EAAQ2B,MAAOmC,aAAW,gBAC1C,kBAAC3D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,qBAGJ,kBAACyD,EAAA,EAAD,KACGmC,EAAoB9F,KAAI,SAACqE,GAAD,OACvB,kBAACtE,EAAA,EAAD,CAAUvB,IAAK6F,EAAI2B,SAAUzB,OAAK,GAChC,kBAACrE,EAAA,EAAD,CAAWsE,UAAU,KAAKC,MAAM,OAC7BJ,EAAI2B,UAEP,kBAAC9F,EAAA,EAAD,KAAYmE,EAAIxB,qB,oCC5FjB0D,EAjBI,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,iBAAkBrI,EAAe,EAAfA,UAIjCsI,EAAQC,OAAOrI,OAAOF,GAExB,OACI,kBAACwI,EAAA,EAAD,CAAa/F,UAAWqF,IAAOU,aAC3B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGpB,SAAU,SAACqB,GAAD,OAAON,EAAiBM,EAAE3B,OAAOC,SACrE,4BAAQA,MAAM,IAAd,oBACCqB,EAAMzG,KAAI,SAACpB,EAAMR,GAAP,OAAa,4BAAQI,IAAKJ,EAAGgH,MAAOxG,GAAOA,SCwCvDmI,E,4MA7CXC,MAAQ,CACJC,gBAAiB,GACjBC,SAAU,GACV/I,UAAW,GACXgJ,KAAM,I,EAaVX,iBAAmB,SAAC5H,GAChB,EAAKwI,SAAS,CAACD,KAAMvI,K,oMATQvB,I,cAAvBgK,E,gBACwBvJ,I,OAAxBwJ,E,OAENC,KAAKH,SAAS,CAACH,gBAAiBI,IAChCE,KAAKH,SAAS,CAACF,SAAUI,EAAgB3J,OACzC4J,KAAKH,SAAS,CAACjJ,UAAWmJ,EAAgBtI,Y,qIAS1C,IAAMwI,EAAQD,KAAKP,MAAMC,gBACnBQ,EAAOF,KAAKP,MAAME,SAClB/I,EAAYoJ,KAAKP,MAAM7I,UACvByH,EAAW2B,KAAKP,MAAMG,KAE5B,OAAGvB,EAEK,yBAAKhF,UAAWqF,IAAOyB,WACnB,kBAAC,EAAD,CAAYvJ,UAAWA,EAAWqI,iBAAkBe,KAAKf,mBACzD,kBAAC,EAAD,CAAiB5H,KAAMgH,EAAUzH,UAAWA,EAAWR,KAAM8J,EAAM9B,gBAAiB6B,KAK5F,yBAAK5G,UAAWqF,IAAOyB,WACnB,kBAAC,EAAD,CAAYvJ,UAAWA,EAAWqI,iBAAkBe,KAAKf,mBACzD,kBAAC,EAAD,CAAW7I,KAAM8J,S,GAzCfzF,IAAM2F,WCJxBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,U,mBCHhD5K,EAAOC,QAAU,CAAC,UAAY,0B","file":"static/js/main.1200b6c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Table_root__3DG3K\"};","import axios from 'axios';\r\n\r\n\r\n//Data for Finland\r\nexport const fetchCurrentYearData = async () =>{\r\n    try {\r\n        const params = {\r\n          \"query\": [\r\n            {\r\n              \"code\": \"Alue\",\r\n              \"selection\": {\r\n                \"filter\": \"all\",\r\n                \"values\": [\r\n                  \"KU*\"\r\n                ]\r\n              }\r\n            },\r\n            {\r\n              \"code\": \"Sukupuoli\",\r\n              \"selection\": {\r\n                \"filter\": \"item\",\r\n                \"values\": [\r\n                  \"SSS\"\r\n                ]\r\n              }\r\n            },\r\n            {\r\n              \"code\": \"Ikä\",\r\n              \"selection\": {\r\n                \"filter\": \"item\",\r\n                \"values\": [\r\n                  \"SSS\"\r\n                ]\r\n              }\r\n            }\r\n          ],\r\n          \"response\": {\r\n            \"format\": \"json\"\r\n          }\r\n        }\r\n    const response = await axios.post('https://pxnet2.stat.fi/PXWeb/api/v1/fi/StatFin/vrm/vamuu/statfin_vamuu_pxt_11lj.px', params)\r\n    const data = response.data.data;\r\n    \r\n    \r\n    return data;\r\n        \r\n    } catch (error) {\r\n        console.log('data error');\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//fetch cities information\r\n\r\nexport const fetchCityData = async () =>{\r\n  try {\r\n      const params = {\r\n        \"query\": [\r\n          {\r\n              \"code\": \"Alue\",\r\n              \"selection\": {\r\n                \"filter\": \"all\",\r\n                \"values\": [\r\n                  \"KU*\"\r\n                ]\r\n              }\r\n            },\r\n            \r\n            {\r\n              \"code\": \"Tiedot\",\r\n              \"selection\": {\r\n                \"filter\": \"item\",\r\n                \"values\": [\r\n                  \"vaesto\",\r\n                  \"kokmuutos\",\r\n                  \"kokmuutos_p\"\r\n                ]\r\n              }\r\n            },\r\n          \r\n          ],\r\n            \"response\": {\r\n              \"format\": \"json\"\r\n            }\r\n      }\r\n  const response = await axios.post('https://pxnet2.stat.fi/PXWeb/api/v1/fi/StatFin/vrm/vaerak/statfin_vaerak_pxt_11ra.px', params)\r\n  const data = response.data.data;\r\n\r\n  const metaDataResponse = await axios.get('https://pxnet2.stat.fi/PXWeb/api/v1/fi/StatFin/vrm/vaerak/statfin_vaerak_pxt_11ra.px');\r\n  \r\n  const metaData = metaDataResponse.data.variables[0];\r\n\r\n\r\n  var CityNames = {};\r\n  var key;\r\n  var valueText;\r\n  for(var i = 0; i < metaData.values.length; i++){\r\n    if(metaData.values[i].startsWith(\"KU\")){\r\n      key = metaData.values[i];\r\n      valueText = metaData.valueTexts[i]\r\n      CityNames[key] = valueText;\r\n    }\r\n  }\r\n  \r\n \r\n  //add city names to the data\r\n  data.forEach(function(city){\r\n    let NameoftheCity = CityNames[city.key[0]];\r\n    city.key.push(NameoftheCity);\r\n    city.key[1] = Number(city.key[1]);\r\n    city.values[0] = Number(city.values[0]);\r\n    city.values[1] = Number(city.values[1]);\r\n    city.values[2] = Number(city.values[2]);\r\n  })\r\n  \r\n  \r\n  return {data: data,\r\n          cityNames: CityNames};\r\n      \r\n  } catch (error) {\r\n      console.log('data error');\r\n      console.log(error);\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'kaupunki', numeric: false, disablePadding: true, label: 'Kaupunki' },\r\n  { id: 'asukasluku', numeric: true, disablePadding: false, label: 'Asukasluku' },\r\n  { id: 'muutos', numeric: true, disablePadding: false, label: 'Muutos' },\r\n  { id: 'muutosPercent', numeric: true, disablePadding: false, label: 'Muutos%' },\r\n];\r\n\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '75%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\n\r\n\r\n\r\nexport default function EnhancedTable({data}) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('desc');\r\n  const [orderBy, setOrderBy] = React.useState('asukasluku');\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n\r\n  \r\n\r\n\r\n  if(!data.length){\r\n    return 'Loading...';\r\n }\r\n\r\n function createData(kaupunki, asukasluku, muutos, muutosPercent) {\r\n  return { kaupunki, asukasluku, muutos, muutosPercent };\r\n}\r\n\r\n\r\n //only last year data\r\nconst lastYearData = [];\r\nconst latestYear = data[data.length - 1].key[1]\r\n\r\ndata.forEach(function(city){\r\n  let year = city.key[1];\r\n  \r\n  if(year === latestYear){\r\n    let NewRow = createData(city.key[2], city.values[0], city.values[1], city.values[2])\r\n    lastYearData.push(NewRow);\r\n  } \r\n});\r\n\r\nconst emptyRows = rowsPerPage - Math.min(rowsPerPage, lastYearData.length - page * rowsPerPage);\r\n  \r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <h3>Kaupungit 2019</h3>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={lastYearData.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(lastYearData, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow key={row.kaupunki} hover>\r\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row.kaupunki}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{row.asukasluku}</TableCell>\r\n                      <TableCell align=\"right\">{row.muutos}</TableCell>\r\n                      <TableCell align=\"right\">{row.muutosPercent}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={lastYearData.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styles from './Table.module.css';\r\n\r\nconst SingleCityTable = ({city, CityNames, data, currentYearData}) => {\r\n\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      width: 250,\r\n    },\r\n    paper: {\r\n      width: 250,\r\n    },\r\n    });\r\n\r\n      const classes = useStyles();\r\n\r\n\r\n    if(!data.length || !currentYearData.length){\r\n       return 'Loading...';\r\n     }\r\n\r\n\r\n    //add city names to the data\r\n    currentYearData.forEach(function(city){\r\n        let NameoftheCity = CityNames[city.key[1]];\r\n        city.key.push(NameoftheCity);\r\n        city.values[0] = Number(city.values[0]);\r\n  })\r\n    \r\n\r\n    function createYearlyData(kaupunki, asukasluku, muutos, vuosi) {\r\n        return { kaupunki, asukasluku, muutos, vuosi };\r\n      }\r\n\r\n    function createMonthlyData(kuukausi, kaupunki, asukasluku) {\r\n        return { kuukausi, kaupunki, asukasluku };\r\n      }\r\n\r\n    var CityName = city;\r\n\r\n    //only selected city\r\n    const SelectedCity = [];\r\n    const SelectedMonthlyCity = [];\r\n\r\n    //for yearly data\r\n    data.forEach(function(city){\r\n        let name = city.key[2];\r\n        \r\n            if(name === CityName){\r\n                let NewRow = createYearlyData(city.key[2], city.values[0], city.values[1], city.key[1])\r\n                SelectedCity.push(NewRow);\r\n            } \r\n        });\r\n    \r\n    //for monthly data\r\n\r\n    currentYearData.forEach(function(city){\r\n        let name = city.key[4];\r\n        \r\n        \r\n            if(name === CityName){\r\n                let NewRow = createMonthlyData(city.key[0], city.key[4], city.values[0])\r\n                SelectedMonthlyCity.push(NewRow);\r\n            } \r\n        });\r\n\r\n\r\n    return(\r\n      <div className={styles.root}>\r\n      <h3>Viimeiset 30 vuotta</h3>\r\n      <Line\r\n            data={{\r\n                labels: SelectedCity.map(({vuosi}) => vuosi),\r\n                datasets: [{\r\n                    data: SelectedCity.map(({asukasluku}) => asukasluku),\r\n                    label: 'Asukasluku',\r\n                    borderColor: '#0062ff',\r\n                    fill: true,\r\n                    lineTension: 0,\r\n                },\r\n                {\r\n                    data: SelectedCity.map(({muutos}) => muutos),\r\n                    label: 'Muutos',\r\n                    borderColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                    lineTension: 0,\r\n                }\r\n            ],\r\n            }}\r\n        />\r\n\r\n      <h3>Kuluneen vuoden ennakkotiedot</h3>\r\n      <Paper className={classes.paper}>\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Kuukausi</TableCell>\r\n              <TableCell>Asukasluku</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {SelectedMonthlyCity.map((row) => (\r\n              <TableRow key={row.kuukausi} hover>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.kuukausi}\r\n                </TableCell>\r\n                <TableCell>{row.asukasluku}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SingleCityTable","import React from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nimport styles from './CitySelect.module.css';\r\n\r\nconst CitySelect = ({handleCityChange, CityNames}) => {\r\n\r\n \r\n\r\nconst names = Object.values(CityNames);\r\n\r\n    return(\r\n        <FormControl className={styles.FormControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCityChange(e.target.value)}>\r\n                <option value=\"\">Kaikki kaupungit</option>\r\n                {names.map((city, i) => <option key={i} value={city}>{city}</option>)}\r\n\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CitySelect;","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport {fetchCurrentYearData, fetchCityData} from './api';\r\nimport CityTable from './Components/Tables/CityTable';\r\nimport SingleCityTable from './Components/Tables/SingleCityTable';\r\nimport CitySelect from './Components/CitySelect/CitySelect';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        CurrentYearData: {},\r\n        CityData: {},\r\n        CityNames: {},\r\n        City: \"\"\r\n    }\r\n\r\n\r\n    async componentDidMount(){\r\n        const FetchedFinData = await fetchCurrentYearData();\r\n        const FetchedCityData = await fetchCityData();\r\n\r\n        this.setState({CurrentYearData: FetchedFinData});\r\n        this.setState({CityData: FetchedCityData.data});\r\n        this.setState({CityNames: FetchedCityData.cityNames});\r\n    }\r\n\r\n    handleCityChange = (city) =>{\r\n        this.setState({City: city});\r\n    }\r\n\r\n\r\n    render(){\r\n        const CData = this.state.CurrentYearData;\r\n        const Data = this.state.CityData;\r\n        const CityNames = this.state.CityNames;\r\n        const CityName = this.state.City\r\n\r\n        if(CityName){\r\n            return(\r\n                <div className={styles.container}>\r\n                    <CitySelect CityNames={CityNames} handleCityChange={this.handleCityChange} />\r\n                    <SingleCityTable city={CityName} CityNames={CityNames} data={Data} currentYearData={CData}/>\r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className={styles.container}>\r\n                <CitySelect CityNames={CityNames} handleCityChange={this.handleCityChange} />\r\n                <CityTable data={Data} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2AYaZ\"};"],"sourceRoot":""}